# -*- coding: utf-8 -*-
"""disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s-uweGAFIZJI7KFuIFXWRM39rJ6I-TX2

**CLASSIFICATION** **MODEL** **TO** **IDENTIFY** **MULTIPLE** **DISEASE**: **Using** **Randomforest** **model**
"""

#import library
import pandas as pd

#import data
disease = pd.read_csv('https://github.com/ybifoundation/Dataset/raw/main/MultipleDiseasePrediction.csv')

#view data
disease.head

#info of data
disease.info(verbose=True)

#summarry statistics
disease.describe()

#check for missing value
disease.prognosis.nunique()

disease.nunique()

#correalation
disease.corr()

#visualise pairplot
import seaborn as sns

#sns.pairplot(disease)

#sns.pairplot(disease)

import matplotlib.pyplot as plt

disease['prognosis'].value_counts()

disease['prognosis'].value_counts().plot.bar

#columns names
disease.columns

disease.shape

#Define y
y = disease['prognosis']

#Define x
x = disease[['itching','skin_rash','nodal_skin_eruptions','shivering','joint_pain','stomach_pain','acidity',
      'ulcers_on_tongue','blackheads','scurring','skin_peeling','silver_like_dusting','small_dents_in_nails','blister','red_sore_around_nose',]]

#split data
from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,train_size=0.8,random_state = 2529)

#verify shape
x_train.shape,x_test.shape,y_train.shape,y_test.shape

#select model
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()

#Train model
model.fit(x_train , y_train)

#predict with model
y_predict = model.predict(x_test)

#model accuracy
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

accuracy_score(y_test , y_predict)

#model confusion matrix
confusion_matrix(y_test , y_predict)

print (classification_report(y_test , y_predict))

#future predction
x_new = x.sample()

#define x_new
x_new

#predict for x_new
model.predict(x_new)

"""**Using** **KNeighbors** **Model**"""

#select model
from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier()

#train or fit model
model.fit(x_train , y_train)

#predict model
y_predict=model.predict(x_test)

#model accuracy
from sklearn.metrics import accuracy_score, confusion_matrix,classification_report

accuracy_score(y_test , y_predict)

#model confusion matrix
confusion_matrix(y_test , y_predict)

print(classification_report(y_test , y_predict))

#future prediction
x_new = x.sample()

#define x_new
x_new

#predict for x_new
model.predict(x_new)